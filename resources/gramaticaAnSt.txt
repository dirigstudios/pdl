Axioma = PP

NoTerminales = { PP P S SS E R RR U UU V VV L Q X B T A K C F H O D }

Terminales = { ! == + id ( ) constEnt cadena %= print input return , if break switch case int boolean string let function ; : = { } default }

Producciones = {
	E -> R RR
	RR -> == R RR
	RR -> lambda
	R -> U UU
	UU -> + U UU
	UU -> lambda
	U -> ! V
	U -> V
	V -> id VV
	V -> ( E )
	V -> constEnt
	V -> cadena
	VV -> ( L )
	VV -> lambda
	S -> id SS
	SS -> %= E ;
	SS -> = E ;
	SS -> ( L ) ;
	S -> print R ;
	S -> input id ;
	S -> return X ;
	L -> E Q
	L -> lambda
	Q -> , E Q
	Q -> lambda
	X -> E
	X -> lambda
	B -> switch ( E ) { O }
	B -> if ( E ) S
	O -> case constEnt : C D O
	O -> default : C D O
	O -> lambda
	D -> break ;
	D -> lambda
	B -> let id T ;
	T -> int
	T -> boolean
	T -> string
	B -> S
	F -> function id H ( A ) { C }
	H -> T
	H -> lambda
	A -> T id K
	A -> lambda
	K -> , T id K
	K -> lambda
	C -> B C
	C -> lambda
	P -> B P
	P -> F P
	P -> lambda
	PP -> P
}
